/* webservice.h
   Generated by wsdl2h 1.2.13 from webservice.wsdl and typemap.dat
   2011-01-12 08:55:40 GMT
   gSOAP XML Web services tools.
   Copyright (C) 2001-2009 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:webservice_sdk                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:webservice_sdk"

*/

//gsoap ns1   schema namespace:	urn:webservice_sdk
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;


//  Forward declaration of class ns1__DevCamerasUrlsResult.
class ns1__DevCamerasUrlsResult;

//  Forward declaration of class UrlsResultArray.
class UrlsResultArray;

//  Forward declaration of class ns1__UrlsResult.
class ns1__UrlsResult;

/// "urn:webservice_sdk":DevCamerasUrlsResult is a complexType.
class ns1__DevCamerasUrlsResult
{ public:
/// Element code of type xs:integer.
    xsd__integer                         code                           1;	///< Required element.
/// Element message of type xs:string.
    std::string                          message                        1;	///< Required element.
/// Element urlresult of type "urn:webservice_sdk":UrlsResultArray.
    UrlsResultArray*                     urlresult                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:webservice_sdk":UrlsResult is a complexType.
class ns1__UrlsResult
{ public:
/// Element camid of type xs:integer.
    xsd__integer                         camid                          1;	///< Required element.
/// Element recurl of type xs:string.
    std::string                          recurl                         1;	///< Required element.
/// Element wapurl of type xs:string.
    std::string                          wapurl                         1;	///< Required element.
/// Element weburl of type xs:string.
    std::string                          weburl                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:webservice_sdk":UrlsResultArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:webservice_sdk":UrlsResult
class UrlsResultArray
{ public:
/// Pointer to array of ns1__UrlsResult*.
    ns1__UrlsResult*                    *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	SDKWebServiceBinding 
//gsoap ns1  service type:	SDKWebServicePortType 
//gsoap ns1  service port:	http://219.235.235.4/ws/sdk/webservice_sdk.php 
//gsoap ns1  service namespace:	urn:webservice_sdk 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage webservice_sdk Definitions

@section webservice_USCOREsdk_bindings Bindings
  - @ref SDKWebServiceBinding

*/

/**

@page SDKWebServiceBinding Binding "SDKWebServiceBinding"

@section SDKWebServiceBinding_operations Operations of Binding  "SDKWebServiceBinding"
  - @ref ns1__GetDevCamerasUrls
  - @ref ns1___USCORE_USCOREconstruct
  - @ref ns1___USCORE_USCOREdestruct

@section SDKWebServiceBinding_ports Endpoints of Binding  "SDKWebServiceBinding"
  - http://219.235.235.4/ws/sdk/webservice_sdk.php

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SDKWebServiceBinding                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__GetDevCamerasUrls                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetDevCamerasUrlsResponse" of service binding "SDKWebServiceBinding" operation "ns1__GetDevCamerasUrls"
struct ns1__GetDevCamerasUrlsResponse
{
    ns1__DevCamerasUrlsResult*          GetDevCamerasUrlsReturn;
};

/// Operation "ns1__GetDevCamerasUrls" of service binding "SDKWebServiceBinding"

/**

Operation details:


				GetDevCamerasUrls   
			
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:SDKWebServiceAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetDevCamerasUrls(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         UserName,
    std::string                         Password,
    std::string                         MAC,
    xsd__integer                        CamId,
    // response parameters:
    struct ns1__GetDevCamerasUrlsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetDevCamerasUrls(
    struct soap *soap,
    // request parameters:
    std::string                         UserName,
    std::string                         Password,
    std::string                         MAC,
    xsd__integer                        CamId,
    // response parameters:
    struct ns1__GetDevCamerasUrlsResponse&
  );
@endcode

C++ proxy class (defined in soapSDKWebServiceBindingProxy.h):
  class SDKWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	GetDevCamerasUrls rpc
//gsoap ns1  service method-encoding:	GetDevCamerasUrls http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetDevCamerasUrls urn:SDKWebServiceAction
int ns1__GetDevCamerasUrls(
    std::string                         UserName,	///< Request parameter
    std::string                         Password,	///< Request parameter
    std::string                         MAC,	///< Request parameter
    xsd__integer                        CamId,	///< Request parameter
    struct ns1__GetDevCamerasUrlsResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1___USCORE_USCOREconstruct                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1___USCORE_USCOREconstructResponse" of service binding "SDKWebServiceBinding" operation "ns1___USCORE_USCOREconstruct"
struct ns1___USCORE_USCOREconstructResponse
{
};

/// Operation "ns1___USCORE_USCOREconstruct" of service binding "SDKWebServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:SDKWebServiceAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1___USCORE_USCOREconstruct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1___USCORE_USCOREconstructResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1___USCORE_USCOREconstruct(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1___USCORE_USCOREconstructResponse&
  );
@endcode

C++ proxy class (defined in soapSDKWebServiceBindingProxy.h):
  class SDKWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	_USCORE_USCOREconstruct rpc
//gsoap ns1  service method-encoding:	_USCORE_USCOREconstruct http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	_USCORE_USCOREconstruct urn:SDKWebServiceAction
int ns1___USCORE_USCOREconstruct(
    struct ns1___USCORE_USCOREconstructResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1___USCORE_USCOREdestruct                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1___USCORE_USCOREdestructResponse" of service binding "SDKWebServiceBinding" operation "ns1___USCORE_USCOREdestruct"
struct ns1___USCORE_USCOREdestructResponse
{
};

/// Operation "ns1___USCORE_USCOREdestruct" of service binding "SDKWebServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:SDKWebServiceAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1___USCORE_USCOREdestruct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1___USCORE_USCOREdestructResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1___USCORE_USCOREdestruct(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1___USCORE_USCOREdestructResponse&
  );
@endcode

C++ proxy class (defined in soapSDKWebServiceBindingProxy.h):
  class SDKWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	_USCORE_USCOREdestruct rpc
//gsoap ns1  service method-encoding:	_USCORE_USCOREdestruct http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	_USCORE_USCOREdestruct urn:SDKWebServiceAction
int ns1___USCORE_USCOREdestruct(
    struct ns1___USCORE_USCOREdestructResponse&	///< Response struct parameter
);

/* End of webservice.h */
