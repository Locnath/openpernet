/* soapClient.cpp
   Generated by gSOAP 2.7.13 from webservice.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.13 2011-01-12 08:55:50 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetDevCamerasUrls(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string UserName, std::string Password, std::string MAC, std::string CamId, struct ns1__GetDevCamerasUrlsResponse &_param_1)
{	struct ns1__GetDevCamerasUrls soap_tmp_ns1__GetDevCamerasUrls;
	if (!soap_endpoint)
		soap_endpoint = "http://219.235.235.4/ws/sdk/webservice_sdk.php";
	if (!soap_action)
		soap_action = "urn:SDKWebServiceAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GetDevCamerasUrls.UserName = UserName;
	soap_tmp_ns1__GetDevCamerasUrls.Password = Password;
	soap_tmp_ns1__GetDevCamerasUrls.MAC = MAC;
	soap_tmp_ns1__GetDevCamerasUrls.CamId = CamId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetDevCamerasUrls(soap, &soap_tmp_ns1__GetDevCamerasUrls);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetDevCamerasUrls(soap, &soap_tmp_ns1__GetDevCamerasUrls, "ns1:GetDevCamerasUrls", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetDevCamerasUrls(soap, &soap_tmp_ns1__GetDevCamerasUrls, "ns1:GetDevCamerasUrls", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__GetDevCamerasUrlsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__GetDevCamerasUrlsResponse(soap, &_param_1, "ns1:GetDevCamerasUrlsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1___USCORE_USCOREconstruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1___USCORE_USCOREconstructResponse &_param_2)
{	struct ns1___USCORE_USCOREconstruct soap_tmp_ns1___USCORE_USCOREconstruct;
	if (!soap_endpoint)
		soap_endpoint = "http://219.235.235.4/ws/sdk/webservice_sdk.php";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1___USCORE_USCOREconstruct(soap, &soap_tmp_ns1___USCORE_USCOREconstruct);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1___USCORE_USCOREconstruct(soap, &soap_tmp_ns1___USCORE_USCOREconstruct, "ns1:__construct", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1___USCORE_USCOREconstruct(soap, &soap_tmp_ns1___USCORE_USCOREconstruct, "ns1:__construct", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1___USCORE_USCOREconstructResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1___USCORE_USCOREconstructResponse(soap, &_param_2, "ns1:__constructResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1___USCORE_USCOREdestruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1___USCORE_USCOREdestructResponse &_param_3)
{	struct ns1___USCORE_USCOREdestruct soap_tmp_ns1___USCORE_USCOREdestruct;
	if (!soap_endpoint)
		soap_endpoint = "http://219.235.235.4/ws/sdk/webservice_sdk.php";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1___USCORE_USCOREdestruct(soap, &soap_tmp_ns1___USCORE_USCOREdestruct);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1___USCORE_USCOREdestruct(soap, &soap_tmp_ns1___USCORE_USCOREdestruct, "ns1:__destruct", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1___USCORE_USCOREdestruct(soap, &soap_tmp_ns1___USCORE_USCOREdestruct, "ns1:__destruct", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1___USCORE_USCOREdestructResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1___USCORE_USCOREdestructResponse(soap, &_param_3, "ns1:__destructResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
