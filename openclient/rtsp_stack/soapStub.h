/* soapStub.h
   Generated by gSOAP 2.7.13 from webservice.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__DevCamerasUrlsResult
#define SOAP_TYPE_ns1__DevCamerasUrlsResult (10)
/* ns1:DevCamerasUrlsResult */
class SOAP_CMAC ns1__DevCamerasUrlsResult
{
public:
	std::string code;	/* required element of type xsd:integer */
	std::string message;	/* required element of type xsd:string */
	class UrlsResultArray *urlresult;	/* required element of type ArrayOfUrlsResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__DevCamerasUrlsResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DevCamerasUrlsResult() : urlresult(NULL), soap(NULL) { }
	virtual ~ns1__DevCamerasUrlsResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UrlsResult
#define SOAP_TYPE_ns1__UrlsResult (12)
/* ns1:UrlsResult */
class SOAP_CMAC ns1__UrlsResult
{
public:
	std::string camid;	/* required element of type xsd:integer */
	std::string recurl;	/* required element of type xsd:string */
	std::string wapurl;	/* required element of type xsd:string */
	std::string weburl;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__UrlsResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UrlsResult() : soap(NULL) { }
	virtual ~ns1__UrlsResult() { }
};
#endif

#ifndef SOAP_TYPE_UrlsResultArray
#define SOAP_TYPE_UrlsResultArray (11)
/* SOAP encoded array of ns1:UrlsResult schema type: */
class SOAP_CMAC UrlsResultArray
{
public:
	ns1__UrlsResult **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_UrlsResultArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         UrlsResultArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~UrlsResultArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDevCamerasUrlsResponse
#define SOAP_TYPE_ns1__GetDevCamerasUrlsResponse (17)
/* ns1:GetDevCamerasUrlsResponse */
struct ns1__GetDevCamerasUrlsResponse
{
public:
	ns1__DevCamerasUrlsResult *GetDevCamerasUrlsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DevCamerasUrlsResult */
};
#endif

#ifndef SOAP_TYPE_ns1__GetDevCamerasUrls
#define SOAP_TYPE_ns1__GetDevCamerasUrls (21)
/* ns1:GetDevCamerasUrls */
struct ns1__GetDevCamerasUrls
{
public:
	std::string UserName;	/* required element of type xsd:string */
	std::string Password;	/* required element of type xsd:string */
	std::string MAC;	/* required element of type xsd:string */
	std::string CamId;	/* required element of type xsd:integer */
};
#endif

#ifndef SOAP_TYPE_ns1___USCORE_USCOREconstructResponse
#define SOAP_TYPE_ns1___USCORE_USCOREconstructResponse (22)
/* ns1:__constructResponse */
struct ns1___USCORE_USCOREconstructResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1___USCORE_USCOREconstruct
#define SOAP_TYPE_ns1___USCORE_USCOREconstruct (25)
/* ns1:__construct */
struct ns1___USCORE_USCOREconstruct
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1___USCORE_USCOREdestructResponse
#define SOAP_TYPE_ns1___USCORE_USCOREdestructResponse (26)
/* ns1:__destructResponse */
struct ns1___USCORE_USCOREdestructResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1___USCORE_USCOREdestruct
#define SOAP_TYPE_ns1___USCORE_USCOREdestruct (29)
/* ns1:__destruct */
struct ns1___USCORE_USCOREdestruct
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (30)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (31)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (33)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (36)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (37)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
typedef std::string xsd__integer;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetDevCamerasUrls(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string UserName, std::string Password, std::string MAC, std::string CamId, struct ns1__GetDevCamerasUrlsResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1___USCORE_USCOREconstruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1___USCORE_USCOREconstructResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1___USCORE_USCOREdestruct(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1___USCORE_USCOREdestructResponse &_param_3);

#endif

/* End of soapStub.h */
